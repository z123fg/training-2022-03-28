/* 
    color and variant are related

    contained primary
    contained secondary
    ..

    outline
    ...

    text
    ...


*/

@use "../../scss/variable";
@use "../../scss/mixin";
$color-map: (
  primary: (
    normal: variable.$primary-color,
    hover: variable.$primary-color-hover,
    hover-light: variable.$primary-color-hover-light,
  ),
  secondary: (
    normal: variable.$secondary-color,
    hover: variable.$secondary-color-hover,
    hover-light: variable.$secondary-color-hover-light,
  ),
  default: (
    normal: variable.$default-color,
    hover: variable.$default-color-hover,
    hover-light: variable.$default-color-hover-light,
  ),
);

@mixin color-variant-classes($color, $variant) {
  .btn-#{$color}-#{$variant} {
    @if $variant == "contained" {
      color: white;
      background-color: map-get(map-get($color-map, $color), "normal");
      border: none;
      box-shadow: variable.$elevation;
    } @else if $variant == "outlined" {
      background: none;
      color: map-get(map-get($color-map, $color), "normal");
      border: 1px
        solid
        rgba(map-get(map-get($color-map, $color), "normal"), 0.5);
    } @else {
      background: none;
      border: none;
      color: map-get(map-get($color-map, $color), "normal");
    }
  }
  .btn-default-#{$variant} {
    color: black;
  }

  .btn-#{$color}-#{$variant}:hover {
    @if $variant == "contained" {
      background-color: map-get(map-get($color-map, $color), "hover");
      box-shadow: none;
    } @else if $variant == "outlined" {
      background-color: rgba(
        map-get(map-get($color-map, $color), "normal"),
        0.08
      );
      border: 1px
        solid
        rgba(map-get(map-get($color-map, $color), "normal"), 0.5);
    } @else {
      background-color: rgba(
        map-get(map-get($color-map, $color), "normal"),
        0.08
      );
    }
  }

  .btn-#{$color}-#{$variant}:disabled {
    @if $variant == "contained" {
      background-color: variable.$disabled-color;
      box-shadow: none;
      color: variable.$disabled-font-color;
    } @else if $variant == "outlined" {
      background: none;
      color: variable.$disabled-font-color;
      border: 1px solid variable.$disabled-color;
    } @else {
      background: none;
      color: variable.$disabled-font-color;
    }
    pointer-events: none;
  }

  .btn-ripple-#{$variant} {
    @if $variant == "contained" {
      background-color: white;
    } @else {
      background-color: map-get(map-get($color-map, $color), "hover");
    }
  }
}

$colors: ("primary", "secondary", "default");
$variants: ("contained", "outlined", "text");

@mixin generate-color-variant-classes {
  @each $variant in $variants {
    @each $color in $colors {
      @include color-variant-classes($color, $variant);
    }
  }
}

@include generate-color-variant-classes();

.btn {
  position: relative;
  overflow: hidden;
  border-radius: 4px;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  gap: 8px;
  cursor: pointer;
}

.btn-medium {
  min-width: 113px;
  height: 36px;
  span {
    @include mixin.font-medium;
    pointer-events: none;
  }
}

//.btn-medium span{

//}
.btn-small {
  min-width: 97px;
  height: 30px;
  span {
    @include mixin.font-small;
    pointer-events: none;
  }
}
.btn-large {
  min-width: 131px;
  height: 42px;
  span {
    @include mixin.font-large;
    pointer-events: none;
  }
}

.btn-ripple {
  pointer-events: none;
  animation: rippleEffect 0.8s;
}

@keyframes rippleEffect {
  0% {
    width: 0px;
    height: 0px;
    opacity: 0.1;
  }
  50% {
    opacity: 0.2;
  }
  100% {
    width: 150px;
    height: 150px;
    opacity: 0;
  }
}
